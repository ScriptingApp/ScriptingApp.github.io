[{"id":7,"title":"Assistant","content":"#\n\nAssistant 模块提供了强大的 API，使您能够从助手请求结构化的 JSON 数据。此功能可用于自动化任务，例如提取账单详情、分类支出或解析文本数据。\n\n\nisAvailable 变量#\n\n表示 Assistant API 是否可用\n\n * 这个状态根据您当前选择的 AI 提供商以及是否配置了一个可用的 API Key 判断。\n * 如何没有提供 API Key，Assistant API 将不可用，尝试调用会失败。\n\n\nrequestStructuredData 方法#\n\n\n方法描述#\n\nrequestStructuredData 允许用户向助手发送文本提示，并根据定义的 JSON 结构模式获取结构化数据。\n\n\n语法#\n\nfunction requestStructuredData<R>(prompt: string, schema: JSONSchemaArray | JSONSchemaObject): Promise<R>;\n\n\n\n参数#\n\n * prompt (string)：提供给助手的输入提示，描述要解析的内容。\n * schema (JSONSchemaArray | JSONSchemaObject)：预期的输出 JSON 结构模式，定义返回数据的格式。\n\n\n返回值#\n\n返回解析为符合 schema 定义的结构化 JSON 数据的 Promise，数据类型为 R。\n\n--------------------------------------------------------------------------------\n\n\nJSON 结构模式定义#\n\n在 requestStructuredData 方法中，schema 参数用于定义返回数据的 JSON 结构，其数据类型如下：\n\n\nJSONSchemaType#\n\ntype JSONSchemaType = JSONSchemaPrimitive | JSONSchemaArray | JSONSchemaObject;\n\n\n基础数据类型定义：\n\ntype JSONSchemaPrimitive = {\n    type: \"string\" | \"number\" | \"boolean\";\n    required?: boolean;\n    description: string;\n};\n\n\n数组类型定义：\n\ntype JSONSchemaArray = {\n    type: \"array\";\n    items: JSONSchemaType;\n    required?: boolean;\n    description: string;\n};\n\n\n对象类型定义：\n\ntype JSONSchemaObject = {\n    type: \"object\";\n    properties: Record<string, JSONSchemaType>;\n    required?: boolean;\n    description: string;\n};\n\n\n\n示例#\n\nconst schema: JSONSchemaObject = {\n    type: \"object\",\n    properties: {\n        totalAmount: {\n            type: \"number\",\n            required: true,\n            description: \"账单总金额\",\n        },\n        category: {\n            type: \"string\",\n            required: true,\n            description: \"账单分类\",\n        },\n        date: {\n            type: \"string\",\n            required: false,\n            description: \"账单日期\",\n        },\n        location: {\n            type: \"string\",\n            required: false,\n            description: \"账单发生地点\",\n        },\n    },\n};\n\n\n--------------------------------------------------------------------------------\n\n\n示例用法#\n\n\n解析账单信息#\n\n假设我们有一张账单，需要提取其中的金额、日期、分类和地点信息。\n\nconst someBillDetails = `\n- 金额: $15.00\n- 日期: 2024-03-11 14:30\n- 位置: 市中心停车场\n- 分类: 停车费\n`;\n\nconst prompt = `请解析以下账单并输出结构化数据: ${someBillDetails}`;\n\nconst data = await Assistant.requestStructuredData(prompt, schema);\nconsole.log(data);\n\n\n\n可能的返回结果#\n\n{\n    \"totalAmount\": 15.0,\n    \"category\": \"停车费\",\n    \"date\": \"2024-03-11 14:30\",\n    \"location\": \"市中心停车场\"\n}\n\n\n--------------------------------------------------------------------------------\n\n\n使用注意事项#\n\n 1. 确保 schema 定义准确：JSON 结构模式应与实际需要的数据格式一致。\n 2. required 属性的使用：如果某字段必须返回，请将 required 设为 true。\n 3. 尽可能提供清晰的 prompt：更详细的 prompt 可提高助手返回数据的准确性。\n 4. 错误处理：requestStructuredData 返回 Promise，应使用 try-catch 处理可能的错误。\n\n示例错误处理：\n\ntry {\n    const data = await Assistant.requestStructuredData(prompt, schema);\n    console.log(\"解析结果:\", data);\n} catch (error) {\n    console.error(\"解析失败:\", error);\n}\n","routePath":"/guide/docs/assistant","lang":"zh","toc":[{"text":"`isAvailable` 变量","id":"isavailable-变量","depth":2,"charIndex":-1},{"text":"`requestStructuredData` 方法","id":"requeststructureddata-方法","depth":2,"charIndex":-1},{"text":"方法描述","id":"方法描述","depth":3,"charIndex":246},{"text":"语法","id":"语法","depth":3,"charIndex":316},{"text":"参数","id":"参数","depth":3,"charIndex":431},{"text":"返回值","id":"返回值","depth":3,"charIndex":552},{"text":"JSON 结构模式定义","id":"json-结构模式定义","depth":2,"charIndex":690},{"text":"`JSONSchemaType`","id":"jsonschematype","depth":3,"charIndex":-1},{"text":"示例","id":"示例","depth":3,"charIndex":1298},{"text":"示例用法","id":"示例用法","depth":2,"charIndex":1955},{"text":"解析账单信息","id":"解析账单信息","depth":3,"charIndex":1963},{"text":"可能的返回结果","id":"可能的返回结果","depth":3,"charIndex":2239},{"text":"使用注意事项","id":"使用注意事项","depth":2,"charIndex":2443}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"Assistant Tool","content":"#\n\nAssistant Tool 是 Scripting 应用中为智能助手（Assistant）提供系统功能扩展的机制。通过定义和实现 Assistant\nTool，开发者可以为 Assistant 提供设备能力访问、文件读写操作、数据分析处理等辅助功能，提升 Assistant 的智能性和实用性。\n\n本文以一个示例工具「Request Current Location」为基础，介绍 Assistant Tool\n的完整实现流程，包括工具创建、配置文件说明、执行逻辑实现以及各类函数的详细说明。\n\n--------------------------------------------------------------------------------\n\n\n一、工具创建流程#\n\n 1. 打开任意脚本项目，在文件管理界面点击“添加 Assistant Tool”按钮。\n\n 2. 在弹出的配置窗口中填写 Assistant Tool 相关的信息。\n\n 3. 点击“保存”后，系统会自动在脚本中生成两个文件：\n\n * assistant_tool.json：描述工具的元数据和参数信息。\n * assistant_tool.tsx：实现工具的执行逻辑。\n\n--------------------------------------------------------------------------------\n\n\n二、配置文件 assistant_tool.json#\n\n该文件用于声明工具的基本信息和行为配置。以下是示例内容及字段说明：\n\n{\n    \"displayName\": \"Request Current Location\",\n    \"id\": \"request_current_location\",\n    \"description\": \"This tool allows you to request the one-time delivery of the latitude and longitude of the user’s current location.\",\n    \"icon\": \"location.fill\",\n    \"color\": \"systemBlue\",\n    \"parameters\": [],\n    \"requireApproval\": true,\n    \"autoApprove\": true,\n    \"scriptEditorOnly\": false\n}\n\n\n\n字段说明：#\n\n字段                 类型        说明\ndisplayName        string    工具在界面中显示的名称\nid                 string    工具唯一标识符，不能重复\ndescription        string    工具功能描述\nicon               string    使用的 SF Symbols 图标名\ncolor              string    工具主色调\nparameters         array     工具需要的参数（为空表示无输入）\nrequireApproval    boolean   是否需要用户批准\nautoApprove        boolean   是否支持 Assistant 自动批准\nscriptEditorOnly   boolean   工具是否仅能在脚本编辑器中使用\n\n--------------------------------------------------------------------------------\n\n\n三、执行逻辑 assistant_tool.tsx 实现示例#\n\ntype RequestCurrentLocationParams = {};\n\nconst locationApprovalRequest: AssistantToolApprovalRequestFn<RequestCurrentLocationParams> = async (\n    params\n) => {\n    return {\n        message: \"The assistant wants to request your current location.\",\n        primaryButtonLabel: \"Allow\",\n    };\n};\n\nconst requestCurrentLocation: AssistantToolExecuteWithApprovalFn<RequestCurrentLocationParams> = async (\n    params,\n    { primaryConfirmed, secondaryConfirmed }\n) => {\n    try {\n        const location = await Location.requestCurrent();\n        if (location) {\n            return {\n                success: true,\n                message: [\n                    \"The user's current location info:\",\n                    `<latitude>${location.latitude}</latitude>`,\n                    `<longitude>${location.longitude}</longitude>`,\n                ].join(\"\\n\"),\n            };\n        }\n        return {\n            success: false,\n            message:\n                \"Failed to request user's current location, ask user to check the device's location permission.\",\n        };\n    } catch {\n        return {\n            success: false,\n            message:\n                \"Failed to request user's current location, ask user to check the device's location permission.\",\n        };\n    }\n};\n\nconst testRequestLocationApprovalFn = AssistantTool.registerApprovalRequest(locationApprovalRequest);\n\nconst testRequestLocationExecuteFn = AssistantTool.registerExecuteToolWithApproval(requestCurrentLocation);\n\n// 可在脚本编辑器中运行以下测试代码：\ntestRequestLocationApprovalFn({});\ntestRequestLocationExecuteFn(\n    {},\n    {\n        primaryConfirmed: true,\n        secondaryConfirmed: false,\n    }\n);\n\n\n--------------------------------------------------------------------------------\n\n\n四、AssistantTool 注册函数详解#\n\n\n1. registerApprovalRequest#\n\n注册一个函数，在执行工具前向用户请求批准。\n\nfunction registerApprovalRequest<P>(\n    requestFn: AssistantToolApprovalRequestFn<P>\n): AssistantToolApprovalRequestTestFn<P>;\n\n\n参数说明：\n\n * requestFn(params, scriptEditorProvider?)：返回提示信息，包括 message、按钮文本等。\n * params：工具执行时的输入参数。\n * scriptEditorProvider：仅在工具设置为仅限脚本编辑器使用时可用，提供脚本文件访问能力。\n\n返回值说明：\n\n返回的测试函数可用于在脚本编辑器中模拟触发批准请求。\n\n--------------------------------------------------------------------------------\n\n\n2. registerExecuteToolWithApproval#\n\n注册一个需要用户批准的执行函数。\n\nfunction registerExecuteToolWithApproval<P>(\n    executeFn: AssistantToolExecuteWithApprovalFn<P>\n): AssistantToolExecuteWithApprovalTestFn<P>;\n\n\n参数说明：\n\n * params：工具执行时的输入参数。\n * userAction：用户在批准提示中选择的操作：\n\ntype UserActionForApprovalRequest = {\n    primaryConfirmed: boolean;\n    secondaryConfirmed: boolean;\n};\n\n\n * scriptEditorProvider：同上。\n\n返回值说明：\n\n返回一个对象：\n\n{\n    success: boolean;\n    message: string;\n}\n\n\n * success: 是否执行成功。\n * message: 返回给 Assistant 的执行成功或失败的信息。\n\n--------------------------------------------------------------------------------\n\n\n3. registerExecuteTool#\n\n注册一个不需要用户批准的工具逻辑。\n\nfunction registerExecuteTool<P>(executeFn: AssistantToolExecuteFn<P>): AssistantToolExecuteTestFn<P>;\n\n\n适用场景：如操作无敏感性、不涉及设备权限时，可使用此方式。\n\n--------------------------------------------------------------------------------\n\n\n4. 测试函数使用#\n\n每个注册函数会返回对应的测试函数，可在脚本中运行：\n\ntestApprovalRequestFn({ ...params });\ntestExecuteFn(\n    { ...params },\n    {\n        primaryConfirmed: true,\n        secondaryConfirmed: false,\n    }\n);\ntestExecuteToolFn({ ...params });\n\n\n--------------------------------------------------------------------------------\n\n\n五、脚本编辑器接口说明（ScriptEditorProvider）#\n\n当工具设置为 scriptEditorOnly: true 时，系统提供 ScriptEditorProvider 接口，允许访问脚本项目的文件系统与语法信息。\n\n接口能力包括：\n\n * 文件读写（读取、更新、写入、插入、替换）\n * 差异比较（openDiffEditor）\n * 语法检查结果（getLintErrors）\n * 获取项目中所有文件/文件夹列表\n\n适用于如格式化脚本、批量修改内容等编辑类工具。\n\n--------------------------------------------------------------------------------\n\n\n六、执行与用户体验流程#\n\n 1. Assistant 在会话中判断是否需要调用某个工具。\n 2. 如果工具设置为需要批准，系统弹出批准对话框：\n    * 显示由 registerApprovalRequest 返回的提示信息。\n    * 用户点击“允许”后执行工具逻辑。\n 3. 执行结果通过 message 字段返回给 Assistant，并可呈现给用户。\n\n--------------------------------------------------------------------------------\n\n\n七、无需批准的工具实现方式#\n\n当不需要显示批准提示时，可直接使用 registerExecuteTool 注册逻辑函数：\n\nAssistantTool.registerExecuteTool<MyParams>(async (params) => {\n    // 执行逻辑\n    return {\n        success: true,\n        message: \"Tool executed successfully.\",\n    };\n});\n\n\n将 assistant_tool.json 中的 requireApproval 字段设置为 false 即可。\n\n--------------------------------------------------------------------------------\n\n\n八、小结#\n\nAssistant Tool 是 Scripting 应用提供的可扩展能力模块，支持用户授权、文件操作、系统调用等多种场景。开发流程主要包括：\n\n 1. 在脚本项目中创建工具；\n 2. 配置工具元信息；\n 3. 实现逻辑函数并注册；\n 4. 使用测试函数验证行为；\n 5. 在 Assistant 会话中自动或主动触发执行。","routePath":"/guide/docs/assistant_tool","lang":"zh","toc":[{"text":"一、工具创建流程","id":"一工具创建流程","depth":2,"charIndex":334},{"text":"二、配置文件 assistant_tool.json","id":"二配置文件-assistant_tooljson","depth":2,"charIndex":615},{"text":"字段说明：","id":"字段说明","depth":3,"charIndex":1071},{"text":"三、执行逻辑 assistant_tool.tsx 实现示例","id":"三执行逻辑-assistant_tooltsx-实现示例","depth":2,"charIndex":1575},{"text":"四、AssistantTool 注册函数详解","id":"四assistanttool-注册函数详解","depth":2,"charIndex":3368},{"text":"1. `registerApprovalRequest`","id":"1-registerapprovalrequest","depth":3,"charIndex":-1},{"text":"2. `registerExecuteToolWithApproval`","id":"2-registerexecutetoolwithapproval","depth":3,"charIndex":-1},{"text":"3. `registerExecuteTool`","id":"3-registerexecutetool","depth":3,"charIndex":-1},{"text":"4. 测试函数使用","id":"4-测试函数使用","depth":3,"charIndex":4717},{"text":"五、脚本编辑器接口说明（ScriptEditorProvider）","id":"五脚本编辑器接口说明scripteditorprovider","depth":2,"charIndex":5029},{"text":"六、执行与用户体验流程","id":"六执行与用户体验流程","depth":2,"charIndex":5357},{"text":"七、无需批准的工具实现方式","id":"七无需批准的工具实现方式","depth":2,"charIndex":5624},{"text":"八、小结","id":"八小结","depth":2,"charIndex":6001}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"预览","content":"","routePath":"/guide/docs/","lang":"zh","toc":[],"domain":"","frontmatter":{"overview":true,"title":"预览"},"version":""},{"id":10,"title":"更新日志","content":"#\n\n\n2024-09-11#\n\n\n新增#\n\n * 支持解析账单信息，提取金额、日期、分类和地点信息。\n * 新增示例用法，展示如何使用 Assistant.requestStructuredData 解析账单。","routePath":"/guide/start/changelog","lang":"zh","toc":[{"text":"2024-09-11","id":"2024-09-11","depth":2,"charIndex":3},{"text":"新增","id":"新增","depth":3,"charIndex":17}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"欢迎使用 Scripting App","content":"#\n\n\n探索 Scripting 的强大功能#\n\n使用我们强大的 TypeScript 和 TSX 开发环境轻松创建和运行脚本。通过高级功能自定义您的体验，以提升生产力。\n\n\n主要功能#\n\n可自定义的编辑器主题和字体 高级调试工具 与 iOS 小组件无缝集成 支持 App Intents 和丰富通知\n\n查看文档\n\n\n开始使用#\n\n立即下载应用，开始构建令人惊叹的脚本。\n\n在 App Store 下载","routePath":"/guide/start/","lang":"zh","toc":[{"text":"探索 Scripting 的强大功能","id":"探索-scripting-的强大功能","depth":2,"charIndex":3},{"text":"主要功能","id":"主要功能","depth":2,"charIndex":87},{"text":"开始使用","id":"开始使用","depth":2,"charIndex":158}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"了解更多","content":"#\n\n\n探索 Scripting 的强大功能#\n\n编写代码：支持 TypeScript","routePath":"/guide/start/more","lang":"zh","toc":[{"text":"探索 Scripting 的强大功能","id":"探索-scripting-的强大功能","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""}]